
// libraries
  #include <Wire.h>
  #include <VL53L0X.h>


// defines
  #define MPU_ADDR 0x68
  #define GYRO_SCALE 65.5  // 65.5 Voor ±500 °/s bereik 131.0 voor 250 bereik


// globale variabelen
  long offsetZ = 0;
  const int samples = 250;

  unsigned long previousMillis = 0;
  const long interval = 2; // ms
  float angleZ = 0.0; // geïntegreerde hoek in graden


// instellen van pinnummers
  const int programmerPin1 = 0;
  const int programmerPin2 = 1;
  const int diepOntlading = 2;
  const int relaisFans = 3;
  const int relaisStepdownConverters = 4;
  const int motorzijkantPWM = 5;
  const int motorZijkantHoogLaag = 6;
  const int motorZijkantLaagHoog = 7;
  const int motorLinksPWM1 = 8;
  const int motorLinksPWM2 = 9;
  const int motorRechtsPWM1 = 10;
  const int motorRecthsPWM2 = 11;
  const int serieleCommunicatie1 = 18;
  const int serieleCommunicatie2 = 19;
  const int sda = 20;
  const int scl = 21;
  const int segment1 = 22;
  const int segment2 = 23;
  const int segment3 = 24;
  const int segment4 = 25;
  const int segment5 = 26;
  const int segment6 = 27;
  const int segment7 = 28;
  const int segment8 = 29;
  const int segment9 = 30;
  const int segment10 =31;
  const int XSHUT1 = 47;
  const int XSHUT2 = 48;
  const int XSHUT3 = 49;
  const int DO = 50;
  const int DI = 51;
  const int CLK = 52;
  const int CS = 53;
  const int stroomSensor = A0;

// PD-regelaar:
/*
    Simulatie van plaats x en snelheid v van een massa m en een stuwkracht F
    Bewegingsvergelijking:
       m.a = F

    Integratie obv
       a = dv/dt
       v = dx/dt

    => dv = a.dt => v_nw - v_oud = a.dt => v_nw = v_oud + a.dt =>
       v = v + a*dt
       x = x + v*dt

  setup
    meet t0
    of simulatie: gebruik beginwaarden van x en v
    of realisatie: meet x
    bereken error
    error_oud = error
    bereken F, a mbv regelaar
    of sim: plot F, x, v, a
    of rea: stuur motoren aan
  loop
    meet t totdat tijd voor nieuwe regelstap is aangebroken (om de 10 ms)
      of sim: bereken x en v
      of rea: meet x
      error_oud = error
      bereken error
      bereken F, a mbv regelaar
      of sim: plot F, x, v, a
      of rea: stuur motoren aan

  Poolplaatsing s-domein
  Im(pool) = 2 x Re(pool) geeft Doorschot van 20%. Goed meetbaar!
  Im(pool) = Re(pool) geeft Doorschot van 4%. Niet goed meetbaar!
*/
  bool simulatie = true;
  const long cyclustijd = 10;      // ms;       Regelaar wordt 100x per seconde ververst.
  long t_oud, t_nw;                // ms, ms;
  float dt = 1;                    // s;        Nodig vanwege d_error / dt in de regelaar
  const float m = 0.8;             // kg;       Massa van de UAV
  float Fx = 0.1, Fy, Mz;          // N, N, Nm; Stuurkrachten en stuurmoment
  const float Fmin = -5, Fmax = 5; // Maximering van stuwkracht voor meer realistische simulatie
  float ax, ay, alfa;              // m/s2;     Versnellingen en hoekversnelling
  float vx    = 0.0, sx    = 0.0;  // m/s, m;   Beginwaarden tbv simulatie
  float vy    = 0.0, sy    = 0.0;  // m/s, m;   Beginwaarden tbv simulatie
  float omega = 0.0, theta = 0.0;  // m/s, m;   Beginwaarden tbv simulatie
  float Kp = 1, Kd = .5, Ki = 1;    // regelaarparameters PID-regelaar
  float error, error_oud, d_error, errorSom; // De errors voor een PID-regelaar
  const float sp = 1.0;            // Setpoint, nodig om sprongresponsie van 0 naar 1 te simuleren

  const long simulatietijd_in_s = long(10); // s; De simulatietijd is instelbaar
  const long simulatietijd = simulatietijd_in_s * long(1000); // ms
  const int pixels = 499;          // aantal weer te geven punten in de Serial plotter
  int pixel = 0;                   // teller van het aantal reeds weergegeven punten
  const float tijdPerPixel = simulatietijd / pixels;
  double tijdVoorNwePixelPlot;

   float ToF() {
     float afstand;
     return (afstand);
  }
  int pwm_links() {
    const int aL = 300, bL = 100;
    analogWrite(motorzijkantPWM, constrain(aL * Fx / 2 + bL, 0, 0));
  }
  int pwm_rechts() {
    const int aR = 302, bR = 105;
    analogWrite(motorZijkantHoogLaag, constrain(aR * Fx / 2 + bR, 0, 0));
  }
  int pwm_midden() {
    const int aM = 302, bM = 105;
    analogWrite(relaisFans, constrain(aM * Fy + bM, 0, 0));
  }
  void motoraansturing() {
    pwm_links();     // Bereken en schrijf alle uitgangen
    pwm_rechts();
    pwm_midden();
  }

    void plot() {
    tijdVoorNwePixelPlot = tijdVoorNwePixelPlot + tijdPerPixel;
    Serial.print(Fx * 1);
    Serial.print(" ");
    Serial.print(ax * 1);
    Serial.print(" ");
    Serial.print(vx * 1);
    Serial.print(" ");
    Serial.println(sx * 1);
    pixel = pixel + 1;
  }
  
  void Poolplaatsing() {
    const float Re = 1, Im = 2, pool3 = 0.5; // Poolplaatsing Im(pool) = 2 x Re(pool): Doorschot = 20%
  //  Berekening PD - parameters adhv de poolplaatsing
    Kp = (Re * Re + Im * Im) * m;
    Kd = 2 * Re * m;
  
    // Berekening PID-parameters adhv de poolplaatsing
    //  Kp = (Re * Re + Im * Im + 2 * Re * pool3) * m;
    //  Kd = (2 * Re + pool3) * m;
    //  Ki = (Re * Re + Im * Im) * pool3 * m;
  }
  
  void Regelaar() {
    error_oud = error;
    error = sp - sx;
    d_error = error - error_oud;
    errorSom = errorSom + error * dt;
    Fx = Kp * error + Kd * d_error / dt; // + Ki * errorSom;
    constrain(Fx, Fmin, Fmax);
    ax = Fx / m;     // bereken de versnelling
  }


// structure voor gelezen data ToF sensoren
  struct ToFdata{
    float afstand1;
    float afstand2;
    float afstand3;
    float hoek;
    float dx;
  };  // einde structure voor ToF data


// Aanmaken van objecten
  VL53L0X ToF1;  // maak een object van VL53L0X en noem deze ToF1
  VL53L0X ToF2;  // maak een object van VL53L0X en noem deze ToF2
  VL53L0X ToF3;  // maak een object van VL53L0X en noem deze ToF3

  ToFdata data;

// setup voor ToF-sensoren
void setupToF(){
  pinMode(XSHUT1, OUTPUT);  // maak van de xshut een output
  pinMode(XSHUT2, OUTPUT);  // maak van de xshut een output
  pinMode(XSHUT3, OUTPUT);  // maak van de xshut een output 

  digitalWrite(XSHUT1, LOW);  // zet de xshut laag
  digitalWrite(XSHUT2, LOW);  // zet de xshut laag
  digitalWrite(XSHUT3, LOW);  // zet de xshut laag
  delay(10);  // wacht 10ms

  digitalWrite(XSHUT1, HIGH); // zet xshut1 hoog
  delay(10);
  ToF1.init();  // initialiseer ToF1
  ToF1.setAddress(0x30);
  // ToF1.startContinuous(600);
  ToF1.setMeasurementTimingBudget(300000);  // 600 ms per meting

  digitalWrite(XSHUT2, HIGH); // zet xshut2 hoog
  delay(10);  // wacht 10ms
  ToF2.init();  // initialiseer ToF2
  ToF2.setAddress(0x31); // geef ToF2 het adres 0x31
  // ToF2.startContinuous(600);
  ToF2.setMeasurementTimingBudget(300000);  // 600 ms per meting

  digitalWrite(XSHUT3, HIGH); // zet xshut3 hoog
  delay(10);  // wacht 10ms
  ToF3.init();  // initialiseer ToF3
  ToF3.setAddress(0x32); // geef ToF3 adres 0x32
  ToF3.setMeasurementTimingBudget(300000);  // 200 ms per meting
  ToF3.startContinuous(600);
} // einde setup ToF


// setup
void setup() {

  Serial.begin(57600); // stel de baudrate in op 9600
  Wire.begin(); // schakel de I2C aan

// simulatie setup PD
  if (simulatie) {
    Serial.print("F a v x");  // De legenda
    if (tijdPerPixel < cyclustijd) Serial.println("___XXXXXX____tijdPerPixel.<.cyclustijd____XXXXXX");
    else Serial.println();
  }
  t_oud = millis();
  if (simulatie) tijdVoorNwePixelPlot = t_oud;
  if (not simulatie) sx = ToF();
  error = sp - sx;
  Poolplaatsing();
  Regelaar();
  if (simulatie) plot();
  else motoraansturing();

// zonder simulatie setup
  if(!simulatie){
     setupToF(); // roep de ToF-setup aan
    
     // Wake up MPU
     Wire.beginTransmission(MPU_ADDR);
     Wire.write(0x6B);  // Power management
     Wire.write(0x00);
     Wire.endTransmission(true);
    
     // Stel gyroscoop bereik in op ±500 °/s (0x08 in register 0x1B)
     Wire.beginTransmission(MPU_ADDR);
     Wire.write(0x1B);  // Gyro config register
     Wire.write(0x08);  // oxo8 voor ±500 °/s 0x00 voor 250 graden
     Wire.endTransmission(true);
    
      calculateOffsets();  // Bepaal gyroscoopoffset
    }

} // einde main setup


// functie om ToF sensoren uit te lezen
void UitlezenToF(){
    
  const int ConstanteAfstand = 235;  // Constante afstand tussen twee ToF-sensoren (235)
  const int CorrectieToF1 = 13.7; // negatief 14.5
  const int CorrectieToF2 = 23.2; // negatief 25.6
  const int CorrectieToF3 = 16.5; // positief 16.5

  data.afstand1 = ToF1.readRangeSingleMillimeters() - CorrectieToF1; // lees ToF3 uit met als eenheid mm
  data.afstand2 = ToF2.readRangeSingleMillimeters() - CorrectieToF2; // lees ToF3 uit met als eenheid mm
  data.afstand3 = ToF3.readRangeSingleMillimeters() - CorrectieToF3; // lees ToF3 uit met als eenheid mm

  // print de afstanden
  // Serial.print("Sensor 1: ");
  Serial.print(data.afstand1);
  Serial.print(" ");
  // Serial.print(" mm\t");

  // Serial.print("Sensor 2: ");
  Serial.print(data.afstand2);
  Serial.print(" ");
  // Serial.print(" mm\t");

  // Serial.print("Sensor 3: ");
  Serial.print(data.afstand3);
  Serial.print(" ");
  // Serial.println(" mm");

  data.hoek = BerekenHoek(data.afstand1, data.afstand2, ConstanteAfstand); // hoek is de teruggeven waarde van BerekenHoek functie
  // print de hoek tussen ToF1 en ToF2
  // Serial.print("Hoek: ");
  Serial.println(data.hoek);

  data.dx = BerekenAfstandAfmeren(data.afstand1, data.afstand2);
} // einde uitlezen ToF


// Functie om hoek te berekenen met ToF sensoren
float BerekenHoek(float D1, float D2, float d){
  float verschil = D2 - D1; // bereken het verschil tussen afstand ToF1 tot de wand en afstand ToF2 tot de wand
  float Theta = (verschil / d); // bereken thetá
  Theta = (180 * Theta) / PI;  // omzetten naar graden
  return Theta ; // geef thetá terug
} // einde berekenen hoek ToF


// Functie om afstand voor afmeren te berekenen
float BerekenAfstandAfmeren(float x1, float x2){
  float dx = (x1 + x2) / 2;
  return dx;
} // einde functie BerekenAfstandAfmeren


// berekenen van offsets van gyroscoop
void calculateOffsets() {

  Serial.println("Berekenen van offsets...");
  for (int i = 0; i < samples; i++) {
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x43); // Startadres gyroscoopdata
    Wire.endTransmission(false);
    Wire.requestFrom(MPU_ADDR, 6, true);

    Wire.read(); Wire.read(); // negeer X
    Wire.read(); Wire.read(); // negeer Y
    offsetZ += (Wire.read() << 8 | Wire.read()); // alleen Z
    delay(5);
  }
  offsetZ /= samples;
  Serial.print("Offset Z: "); Serial.println(offsetZ);
} // einde berekenen offests gyro


// uitlezen van gyroscoop
void lezenGyro(){
    unsigned long currentMillis = micros();
    if (currentMillis - previousMillis >= interval) {
      float dt = (currentMillis - previousMillis) / 1000000.0;
      previousMillis = currentMillis;

      // Lees gyro Z-as
      Wire.beginTransmission(MPU_ADDR);
      Wire.write(0x43);
      Wire.endTransmission(false);
      Wire.requestFrom(MPU_ADDR, 6, true);

      Wire.read(); Wire.read(); // negeer X
      Wire.read(); Wire.read(); // negeer Y
      int16_t gyroZ = (Wire.read() << 8 | Wire.read()) - offsetZ;

      float gyroZ_dps = gyroZ / GYRO_SCALE;
      angleZ += gyroZ_dps * dt;

      Serial.print("Angle Z (deg): ");
      Serial.println(angleZ);
    }
} // einde lezen gyro


// void loop, blijft herhaald worden
void loop() {
  t_nw = millis();    // Lees de tijd
  if (t_nw - t_oud > cyclustijd) {
    dt = (t_nw - t_oud) * 0.001;
    t_oud = t_nw;

// simulatie
    if (simulatie) {
      // SIMULATIEMODE
      sx = sx + vx * dt; // Bereken x
      vx = vx + ax * dt; // Bereken v
      Regelaar();

      if (pixel == pixels) while (true);       // Stop met plotten als buffer vol is
      if (t_nw > tijdVoorNwePixelPlot) plot(); // Plot enkel op juiste momenten
    } 
//    else {
//      // REËLE MODE: regelaar werkt met sensoren
//      sx = ToF();  // Meet afstand via sensor
//      Regelaar();
//      motoraansturing();
//    }
  }

// zonder simulatie
  if (!simulatie) {
    // Alleen bij niet-simulatie: States afhandelen via seriële input
    static int startStates = 0;
    static bool Geprint = false;

    // Verwerking seriële commando's
    if (Serial.available()) {
      String input = Serial.readStringUntil('\n');
      input.trim();

      if (input == "Idle"            ){ startStates =  0; Geprint = false; }
      if (input == "Afmeren"         ){ startStates =  1; Geprint = false; }
      if (input == "LangsDeMuurVaren"){ startStates =  2; Geprint = false; }
      if (input == "STOPPEN"         ){ startStates =  3; Geprint = false; }
      if (input == "Keren"           ){ startStates =  4; Geprint = false; }
      if (input == "ArucoVinden"     ){ startStates =  5; Geprint = false; }
      if (input == "Stoppen"         ){ startStates =  6; Geprint = false; }
      if (input == "stop"            ){ startStates = 10; Geprint = false; }
      if (input == "ToF"             ){ startStates = 11; Geprint = false; }
      if (input == "gyro"            ){ startStates = 12; Geprint = false; }
      if (input == "beide"           ){ startStates = 13; Geprint = false; }
      if (input == "test"            ){ startStates = 14; Geprint = false; }
    }

    // Switch voor states alleen als we NIET simuleren
    switch (startStates) {
      case 0: // Idle
        if (!Geprint) { Serial.println("State: Idle"); Geprint = true; }
        break;
      case 1: // Afmeren
        if (!Geprint) { Serial.println("State: Afmeren"); Geprint = true; }
        UitlezenToF();
        
        break;
      case 2: // LangsDeMuurVaren
        if (!Geprint) { Serial.println("State: LangsDeMuurVaren"); Geprint = true; }
        break;
      case 3: // STOPPEN
        if (!Geprint) { Serial.println("State: STOPPEN"); Geprint = true; }
        break;
      case 10: // stop alles
        if (!Geprint) { Serial.println("Alle sensoren uit."); Geprint = true; }
        break;
      case 11: // Alleen ToF
        if (!Geprint) { Serial.println("ToF actief"); Geprint = true; }
        UitlezenToF();
        break;
      case 12: // Alleen gyroscoop
        if (!Geprint) { Serial.println("Gyroscoop actief"); Geprint = true; }
        lezenGyro();
        break;
      case 13: // Beide actief
        if (!Geprint) { Serial.println("ToF + Gyro actief"); Geprint = true; }
        UitlezenToF();
        lezenGyro();
        break;
      case 14: // Teststate
        if (!Geprint) { Serial.println("Teststate actief"); Geprint = true; }
        break;
    }
  }
}
